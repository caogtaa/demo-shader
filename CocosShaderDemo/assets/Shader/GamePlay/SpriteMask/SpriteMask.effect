// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        maskTexture: { value: white }
        bgOffset: { value: [0.0, 0.0] }
        bgSize: { value: [1.0, 1.0] }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    v_uv0.y = 1.0-v_uv0.y;    // uv坐标从左上角开始，Y坐标和顶点相反 （ccc v2.2.2）
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;    // cc.Node上设置的颜色

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform UV_BG {
    vec2 bgOffset;
    vec2 bgSize;
  };
  uniform sampler2D texture;
  uniform sampler2D maskTexture;
  #endif

  void main () {
    // vec4 o = vec4(1, 1, 1, 1);

    // #if USE_TEXTURE
    // o *= texture(texture, v_uv0);
    // // o.a = texture(maskTexture, v_uv0).a;
    //   // #if CC_USE_ALPHA_ATLAS_TEXTURE
    //   // o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    //   // #endif
    // #endif

    vec2 bguv = v_uv0 * bgSize;

    vec4 o = texture(texture, bgOffset + bguv);
    o.a = texture(maskTexture, v_uv0).a;
    o *= v_color;

    gl_FragColor = o;
  }
}%
